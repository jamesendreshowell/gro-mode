* gro-mode
  An Emacs major mode for *freewriting.* After "growing" writing ([[https://en.wikipedia.org/wiki/Peter_Elbow#Writing_Without_Teachers_1973][Elbow, 1973]]).
** Background
   [[https://en.wikipedia.org/wiki/Peter_Elbow][Peter Elbow]] (and others) established the method of "[[https://en.wikipedia.org/wiki/Freewriting][freewriting]],"
   producing prose without any reflection, revision, or editing. There
   was no Emacs tool for this style of writing, so here is a very
   simple major mode that disables editing keys.
** Installation
   Just put the =gro.el= file in a directory in your =load-path=, and
   =require 'gro= in your Emacs initialization file.
#+BEGIN_SRC
(require 'gro)
#+END_SRC
** Usage
   Visiting a file with extension =.gro= will invoke Gro mode. Or, in any
   buffer, 
#+BEGIN_SRC
M-x gro-mode
#+END_SRC
** Features and customization
*** Providing keystroke feedback
    When a disabled key is pressed, there are four ways that Gro mode
    provides feedback:
    - inserting a symbol at point (set =gro-feedback-insert-string= to
      "" to disable; default is "Ã—")
    - displaying a reminder in the echo area (set
      =gro-feedback-message-string= to "" to disable; default is
      "Growing! Editing keys disabled.")
    - ringing the bell (set =gro-feedback-bell= to =nil= to disable;
      non-nil to enable)
    - flashing the modeline (set =gro-feedback-modeline-flash= to =nil=
      to disable; non-nil to enable)
*** Inserting timestamps
    Since this stream-of-consciousness method of writing lends itself
    to journaling, =gro-insert-timestamp= (C-c C-c) will insert a
    timestamp of format =gro-timestamp-format= (default is /e.g./
    "Tuesday 2020 June 09 13:54").
    #+BEGIN_SRC
   C-c C-c gro-insert-timestamp
    #+END_SRC
*** Hiding text ("focus")
    Sometimes you might want to prevent distraction even from the text
    that you have just typed. So =gro-focus-toggle= (C-c C-f) will
    limit the display of =gro-focus-lines-limit= lines of text (defalt
    is 3 lines). Calling it again shows the buffer filling the entire
    window.
    #+BEGIN_SRC
   C-c C-f gro-focus-toggle
    #+END_SRC
*** Moving to the end of the buffer
    Keys that move point are disabled! Upon entering Gro mode, point
    moves to the end of the buffer, so new text is added beneath
    previous text. To disable this behavior, add
    #+BEGIN_SRC
   (remove-hook 'gro-mode-hook 'end-of-buffer)
    #+END_SRC
    to your init-file.
** Sample init-file excerpt
    #+BEGIN_SRC 
(require 'gro)

;;; Disable all feedback
(setq gro-feedback-insert-string "")
(setq gro-feedback-message-string "")
(setq gro-feedback-bell nil)
(setq gro-feedback-visual-bell nil)

;;; Set focus to only one line at a time!
;;; Toggle focus with C-c C-f
(setq gro-focus-lines-limit 1)

;;; Disable default movement to end of buffer
(remove-hook 'gro-mode-hook 'end-of-buffer)

;;; Highly recommend real-auto-save mode
(add-hook 'gro-mode-hook 'real-auto-save-mode)
    #+END_SRC
    Gro mode goes well with [[https://github.com/halueda/real-auto-save][real-auto-save mode]].
** Miscellaneous
*** Name
    Elbow used the metaphors of "growing" writing (including
    freewriting) followed by "cooking" writing (including conventional
    reflection and revision). Thus Gro mode is named for "growing"
    writing, as well as in reverse lexicographical homage to the
    redoubtable [[https://orgmode.org/][org mode]], an excellent tool for "cooking" writing (in
    addition to much, much else).
*** Prior art
    Manu Ebert's [[https://github.com/maebert/themostdangerouswritingapp][The Most Dangerous Writing App]] includes "hardcore
    mode," which hides previously-typed text. This feature inspired
    =gro-focus-toggle=.
*** License
    [[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License 3.0]]
